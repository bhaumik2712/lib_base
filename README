Note:
I have recently converted my projects to Android Studio, and converted the library to work with Gradle/Android Studio.

Short instructions on how to integrate:

1. From your projects root directory (assuming it is version controlled in Git), run:
> git submodule add git@github.com:micabyte/lib_base.git

2. In settings.gradle, add:
include ':lib_base'

Then sync the project, and make sure to add a dependency on lib_base in the core project file.


Old README: To be updated

The MicaByte Game Library (micabyte/android_game) is an Android library that
encapsulates some of the logic required for creating a simple 2D game using
the native Android graphics library.

This might be useful to you if:

* You want a simple 2D graphics library for Android, and you don't need any
flashy effects. It doesn't get much simpler than Canvas.drawBitmap(...) and
the Canvas is plenty fast enough for graphics that are not heavy on animation.

* You want to combine 2D graphics with native Android UI elements. For
whatever reason, almost all game frameworks refuse to use the native Android
UI, which makes building complex UIs a chore.

* You want to do 2D graphics using SurfaceView in Android, but haven't found
any good examples to work with.

You won't find this useful if you are looking to build 3D graphics or need
lots of animation. For those kind of demands, I recommend taking a look at
an OpenGL framework; e.g., libGDX.

It is released under the Apache 2.0 license. 

If you do bug fixes, improvements or extensions, please consider contributing
them back to the library to be incorporated in future iterations.


Usage:

The current project setup uses two libraries:
 
  * google-play-services_lib: The standard Google Play Services lib that exists
  in the Android SDK.
  
  * google-compatibility_lib: A library project containing app compatibility
  libraries for v4 and v7. Google will create this automatically if you use
  the current API to create a new library with minimum SDK 10.


Main Components:

* ImageHandler: This is a standard singleton class image cache using 
SoftReferences. Useful to manage bitmaps.  

* MusicHandler: A very simple static class to manage playback of music. Needs
more work.

* StringHandler: A simple class that allows for some string manipulation.

* MicaSurfaceView: A SurfaceView implementation based on the "standard"
render thread format, with pan, fling, and pinch-zoom support implemented.

* BitmapSurfaceRenderer: Rendering implementation for GameSurfaceView.
Allows for the handling of very large bitmaps (larger than available
memory) as backgrounds. 

* TileMapSurfaceRenderer: Rendering implementation for GameSurfaceView that
handles a simple TileMap of squares.


Example code:

A very simple example project can also be found on github:
https://github.com/micabyte/android_game_example

I would like to demonstrate how I use the framework with fragments, etc.,
but for the moment I don't have the time to build anything more elaborate,
so at the moment this is very simple (just shows how a map is displayed).


Limitations:

The library requires Android 2.3.3 or better. The reason for this is entirely
due to the use of BitmapRegionDecoder. Remove that, and the library should be
compatible down to Android 1.6.

Also, note that while the library builds upon code from my previous projects
and I use it in my current development, this particular version of the library
has not yet stood the "test of fire" from tens of thousands of devices. There
may still be many subtle (and not so subtle) bugs in the code.

TODO:

* HexMap class.
